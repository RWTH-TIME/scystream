networks:
  core:
  airflow:
  data_processing:

volumes:
  postgres-airflow-volume:
  airflow-plugins:
  airflow-dags:
  airflow-logs:
  airflow-config:
  airflow-sources:
  core-postgres:
  minio-data:
  keycloak-postgres-data:

x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.0.4}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres-airflow/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis-airflow:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 0
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 0
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./airflow-dags:/opt/airflow/dags
    - airflow-logs:/opt/airflow/logs
    - airflow-config:/opt/airflow/config
    - airflow-plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
    - ~/.docker:/root/.docker:ro
  user: "0:0"
  depends_on:
    &airflow-common-depends-on
    redis-airflow:
      condition: service_healthy
    postgres-airflow:
      condition: service_healthy

services:
  redis-airflow:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - airflow

  postgres-airflow:
    image: postgres:14
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-airflow-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - airflow-sources:/sources
    networks:
      - airflow

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow
      - core

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - data_processing
      - airflow

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    networks:
      - airflow

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow

  ### application:
  frontend:
    build: frontend
    restart: always
    ports:
      - "8000:80"
    environment:
      NEXT_PUBLIC_OIDC_PROVIDER: http://localhost:8090,
      NEXT_PUBLIC_CLIENT_ID: "scystream-frontend"
      NEXT_PUBLIC_REDIRECT_URI: "http://localhost:8000"
      NEXT_PUBLIC_POST_LOGOUT_REDIRECT_URI: "http://localhost:8000"
    networks:
      - core

  core:
    build: core
    restart: always
    ports:
      - "4000:80"
    environment:
      SSH_AUTH_SOCK: /ssh-agent
      EXTERNAL_URL: "http://localhost:8000"
      AIRFLOW_HOST: "http://airflow-apiserver:8080/api/v1"
    depends_on:
      core-postgres:
        condition: service_healthy
    volumes:
      - ./airflow-dags:/airflow-dags
      - ${SSH_AUTH_SOCK}:/ssh-agent:ro
    networks:
      - core
      - data_processing

  core-postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: core
      POSTGRES_PASSWORD: core
      POSTGRES_DB: core
    volumes:
      - core-postgres:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U core -d core -q"]
      interval: 10s
      timeout: 2s
      retries: 5
    networks:
      - core

  smtp:
    image: reachfive/fake-smtp-server
    networks:
      - core

  catapulte:
    build: github.com/jdrouet/catapulte
    environment:
      LOG: debug
      SMTP__HOSTNAME: smtp
      SMTP__PORT: 1025
      TEMPLATE__TYPE: local
      TEMPLATE__PATH: /template
    volumes:
      - "./mail-template:/template:ro"
    depends_on:
      - smtp
    networks:
      - core

  data-postgres:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    networks:
      - data_processing

  data-minio:
    image: quay.io/minio/minio
    restart: always
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
    command: server /data --console-address ":9001"
    networks:
      - data_processing

  keycloak-postgres:
    image: postgres
    volumes:
      - "keycloak-postgres-data:/var/lib/postgresql/data"
    environment:
      POSTGRES_DB: "keycloak"
      POSTGRES_USER: "keycloak"
      POSTGRES_PASSWORD: "password"

  keycloak:
    image: quay.io/keycloak/keycloak
    environment:
      KC_DB: "postgres"
      KC_DB_URL: "jdbc:postgresql://keycloak-postgres:5432/keycloak"
      KC_DB_USERNAME: "keycloak"
      KC_DB_PASSWORD: "password"
      KC_HOSTNAME: "localhost"
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_LOG_LEVEL: "info"
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: start-dev --import-realm
    ports:
      - "8090:8080"
    depends_on:
      - keycloak-postgres
    volumes:
      - ./.keycloak-config:/opt/keycloak/data/import
